# setting up global variables
mkvec 3
setgp
# body of program
# SequenceExpression(seq=[AssignmentExpression(var=VariableExpression(name='y'), value=SelfEvaluatingExpression(id=2)), AssignmentExpression(var=VariableExpression(name='f'), value=LambdaExpression(params=[], body=SequenceExpression(seq=[AssignmentExpression(var=VariableExpression(name='x'), value=BinaryOperatorExpression(e1=VariableExpression(name='y'), op='+', e2=SelfEvaluatingExpression(id=1)))]))), CallExpression(procname=VariableExpression(name='f'), params=[])])
# AssignmentExpression(var=VariableExpression(name='y'), value=SelfEvaluatingExpression(id=2))
# SelfEvaluatingExpression(id=2)
loadc 2
mkbasic
pushglobalvec
storeaddr 0
pop 1
# AssignmentExpression(var=VariableExpression(name='f'), value=LambdaExpression(params=[], body=SequenceExpression(seq=[AssignmentExpression(var=VariableExpression(name='x'), value=BinaryOperatorExpression(e1=VariableExpression(name='y'), op='+', e2=SelfEvaluatingExpression(id=1)))])))
# LambdaExpression(params=[], body=SequenceExpression(seq=[AssignmentExpression(var=VariableExpression(name='x'), value=BinaryOperatorExpression(e1=VariableExpression(name='y'), op='+', e2=SelfEvaluatingExpression(id=1)))]))
pushglobalvec
pushaddr 0
pop 1
pushglobalvec
pushaddr 2
pop 1
pushglobalvec
mkfunval lambda_0
jump end_lambda_0
lambda_0:
# SequenceExpression(seq=[AssignmentExpression(var=VariableExpression(name='x'), value=BinaryOperatorExpression(e1=VariableExpression(name='y'), op='+', e2=SelfEvaluatingExpression(id=1)))])
# AssignmentExpression(var=VariableExpression(name='x'), value=BinaryOperatorExpression(e1=VariableExpression(name='y'), op='+', e2=SelfEvaluatingExpression(id=1)))
# BinaryOperatorExpression(e1=VariableExpression(name='y'), op='+', e2=SelfEvaluatingExpression(id=1))
# VariableExpression(name='y')
pushglobalvec
pushaddr 0
getbasic
loadc 1
add
mkbasic
pushglobalvec
storeaddr 1
popenv
end_lambda_0:
pushglobalvec
storeaddr 1
pop 1
# CallExpression(procname=VariableExpression(name='f'), params=[])
mark back_from_call_0
mkvec 0
setpv
# VariableExpression(name='f')
pushglobalvec
pushaddr 1
apply
back_from_call_0:
getbasic
